package imdbFacetSearch;

import java.sql.*;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author User
 */
public class hw3 extends javax.swing.JFrame {
    
    List<String> masterGenre;
    List<String> masterCountry;
    List<String> masterLocation;
    
    boolean orToggle = false;
    
    DefaultListModel genreListModel = new DefaultListModel();
    DefaultListModel countryListModel = new DefaultListModel();
    DefaultListModel filmingLocationCountryListModel = new DefaultListModel();
    DefaultListModel movieTagValueListModel = new DefaultListModel();
    DefaultListModel resultListModel = new DefaultListModel();
    String lastQuery = null;
    String initialQuery = null;
    String countryQuery = null;
    String filmingLocationCountryQuery = null;
    
    String ratingQuery = null;
    String reviewsQuery = null;
    String startYearQuery = null;
    String endYearQuery = null;
    
    Connection c;
    

    /**
     * Creates new form hw3
     */
    public hw3() {
        initComponents();
        establishDBConnection();
        tagWeightComboBox.setVisible(false);
        tagWeightValueTextField.setVisible(false);
        try{loadGenreData();}catch (Exception e){}
        //try{loadFilmingLocationCountryData();}catch (Exception e){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        filmLocationCountryList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        genreList1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        countryList1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        movieTagValuesList = new javax.swing.JList<>();
        ratingComboBox = new javax.swing.JComboBox<>();
        numberOfReviewsComboBox = new javax.swing.JComboBox<>();
        ratingValueTextField = new javax.swing.JTextField();
        reviewsValueTextField1 = new javax.swing.JTextField();
        andOrComboBox = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        queryTextArea = new javax.swing.JTextArea();
        executeButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        getTagsButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tagWeightComboBox = new javax.swing.JComboBox<>();
        tagWeightValueTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        startYearTextField = new javax.swing.JTextField();
        endYearTextField = new javax.swing.JTextField();
        numberOfResultsTextField = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        filmLocationCountryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filmLocationCountryListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(filmLocationCountryList);

        genreList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        genreList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                genreList1MouseClicked(evt);
            }
        });
        genreList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                genreList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(genreList1);

        countryList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countryList1MouseClicked(evt);
            }
        });
        countryList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                countryList1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(countryList1);

        jScrollPane4.setViewportView(movieTagValuesList);

        ratingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "=", "<", ">", "<=", ">=" }));

        numberOfReviewsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "=", "<", ">", "<=", ">=" }));

        ratingValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingValueTextFieldActionPerformed(evt);
            }
        });

        reviewsValueTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewsValueTextField1ActionPerformed(evt);
            }
        });

        andOrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "AND", "OR" }));
        andOrComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andOrComboBoxActionPerformed(evt);
            }
        });

        queryTextArea.setColumns(20);
        queryTextArea.setRows(5);
        queryTextArea.setText("<Show Query Here: >");
        jScrollPane5.setViewportView(queryTextArea);

        executeButton.setText("Execute Query");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultListMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(resultList);

        getTagsButton1.setText("Get Tags");
        getTagsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTagsButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Critics' Rating");

        jLabel2.setText("Number of Reviews");

        jLabel3.setText("value:");

        jLabel4.setText("value:");

        jLabel5.setText("Genres:");

        jLabel6.setText("Country:");

        jLabel7.setText("Filming Location Country");

        jLabel8.setText("Movie Tag Values:");

        tagWeightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "=", "<", ">", "<=", ">=" }));

        tagWeightValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagWeightValueTextFieldActionPerformed(evt);
            }
        });

        jLabel9.setText("Year");

        startYearTextField.setText("Start");
        startYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startYearTextFieldActionPerformed(evt);
            }
        });

        endYearTextField.setText("End");
        endYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endYearTextFieldActionPerformed(evt);
            }
        });

        numberOfResultsTextField.setText("Number of Results");

        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        jScrollPane7.setViewportView(infoTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(andOrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ratingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(numberOfReviewsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ratingValueTextField)
                                        .addComponent(reviewsValueTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 73, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tagWeightComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tagWeightValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numberOfResultsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getTagsButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(825, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tagWeightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tagWeightValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(getTagsButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ratingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ratingValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(56, 56, 56)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfReviewsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reviewsValueTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(andOrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)
                                    .addComponent(startYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(endYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(numberOfResultsTextField)
                                .addGap(1, 1, 1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(287, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void loadTagQuery() throws Exception{
        Statement s = c.createStatement();
        ResultSet rs = null;
        
        String builderQuery = null;
        String lastQuery;
        masterGenre = genreList1.getSelectedValuesList();
        masterCountry = countryList1.getSelectedValuesList();
        masterLocation = filmLocationCountryList.getSelectedValuesList();
        
        System.out.println("masterGenre: "+ masterGenre);
        System.out.println("masterCountry: "+ masterCountry);
        System.out.println("masterLocation: "+ masterLocation);
        
        System.out.println("so far: ");
        System.out.println(countryQuery);
      
        System.out.println("so far: ");
        System.out.println(filmingLocationCountryQuery);
        
        System.out.println("so far: ");
        System.out.println(this.lastQuery);
        
        boolean nothingBefore = false;
        if(this.lastQuery == null){
            if(filmingLocationCountryQuery == null){
                if(countryQuery == null){
                    nothingBefore = true;
                    lastQuery = null;
                    
                
                }
                else{
                lastQuery = countryQuery;
                }
                
            }
            else{
            lastQuery = filmingLocationCountryQuery;
            }
        }
        else{
            lastQuery = this.lastQuery;
        }
                    
        
        
        if(ratingQuery!=null && nothingBefore){
            builderQuery = "";
            System.out.println(ratingQuery);
            //builderQuery += " intersect ";
            builderQuery += ratingQuery;
            nothingBefore = false;
        }
        else if (ratingQuery!=null && !nothingBefore)
        {
            builderQuery = "";
            System.out.println(ratingQuery);
            builderQuery += " intersect ";
            builderQuery += ratingQuery;
           
        }
        
        
        if(reviewsQuery!=null && nothingBefore)
        {
            System.out.println(reviewsQuery);
            builderQuery = "";
            builderQuery += reviewsQuery;
            nothingBefore = false;
        }
        else if (reviewsQuery!=null && !nothingBefore)
        {
            System.out.println(reviewsQuery);
            builderQuery += " intersect ";
            builderQuery += reviewsQuery;
           
        }
        
        if(startYearQuery!=null && nothingBefore)
        {
            System.out.println(startYearQuery);
            builderQuery = "";
            builderQuery += startYearQuery;
             nothingBefore = false;
        }
        else if (startYearQuery!=null && !nothingBefore)
        {
            System.out.println(startYearQuery);
            builderQuery += " intersect ";
            builderQuery += startYearQuery;
           
        }
        if(endYearQuery!=null && nothingBefore){
            System.out.println(endYearQuery);
            builderQuery = "";
            builderQuery += endYearQuery;
             nothingBefore = false;
        }
        else if (endYearQuery!=null && !nothingBefore)
        {
            
            System.out.println(endYearQuery);
            builderQuery += " intersect ";
            builderQuery += endYearQuery;  
        }
    
     
         String executeableQuery = null; 
        
        if (builderQuery == null && lastQuery == null){
           executeableQuery = "Select movies.id from movies";
            
        }
        else{
            if(lastQuery == null){
           executeableQuery = "Select movies.id\n"
        +"from movies\n"
        +"where movies.id in (" + builderQuery + ")\n";
            }
            else{ // last query not null
                if(builderQuery !=null){
         executeableQuery = "Select movies.id\n"
        +"from movies\n"
        +"where movies.id in ("+lastQuery +" "+ builderQuery + ")\n";
            }
                else{
                    executeableQuery = "Select movies.id\n"
        +"from movies\n"
        +"where movies.id in ("+lastQuery +")\n";        
                }
            }
        }
        
        String newExecutableQuery = "select tags.value\n"
                + "from tags, movies, movietags\n"
                + "where tags.id = movietags.tagid\n"
                + "AND movietags.movieid = movies.id\n"
                + "AND movies.id in (" + executeableQuery + ")";
        
        setQueryText(newExecutableQuery);
        rs = s.executeQuery(newExecutableQuery);
        
        //int count = rs.getMetaData().get;
        
        movieTagValueListModel.clear();
        int counter = 0;
        while(rs.next())
        {
            if(!movieTagValueListModel.contains(rs.getString("value")))
            {
                movieTagValueListModel.addElement(rs.getString("value"));
                counter ++;
                
            }
        }
        movieTagValuesList.setModel(movieTagValueListModel);
        numberOfResultsTextField.setText("results: "+counter);
        System.out.println("what is being queried: \n"+executeableQuery);
        
        rs.close();
        s.close();
        
        
    
    
    }
    private void loadMasterQuery() throws Exception{
        Statement s = c.createStatement();
        ResultSet rs = null;
        
        String builderQuery = null;
        String lastQuery;
        masterGenre = genreList1.getSelectedValuesList();
        masterCountry = countryList1.getSelectedValuesList();
        masterLocation = filmLocationCountryList.getSelectedValuesList();
        
        System.out.println("masterGenre: "+ masterGenre);
        System.out.println("masterCountry: "+ masterCountry);
        System.out.println("masterLocation: "+ masterLocation);
        
        System.out.println("so far: ");
        System.out.println(countryQuery);
      
        System.out.println("so far: ");
        System.out.println(filmingLocationCountryQuery);
        
        System.out.println("so far: ");
        System.out.println(this.lastQuery);
        
        boolean nothingBefore = false;
        if(this.lastQuery == null){
            if(filmingLocationCountryQuery == null){
                if(countryQuery == null){
                    nothingBefore = true;
                    lastQuery = null;
                    
                
                }
                else{
                lastQuery = countryQuery;
                }
                
            }
            else{
            lastQuery = filmingLocationCountryQuery;
            }
        }
        else{
            lastQuery = this.lastQuery;
        }
                    
        System.out.println("nothingBefore: "+nothingBefore);
        
        if(ratingQuery!=null && nothingBefore){
            builderQuery = "";
            System.out.println(ratingQuery);
            //builderQuery += " intersect ";
            builderQuery += ratingQuery;
            nothingBefore = false;
        }
        else if (ratingQuery!=null && !nothingBefore)
        {
            builderQuery = "";
            System.out.println(ratingQuery);
            builderQuery += " intersect ";
            builderQuery += ratingQuery;
           
        }
        System.out.println("nothingBefore: "+nothingBefore);
        
        
        if(reviewsQuery!=null && nothingBefore)
        {
            System.out.println(reviewsQuery);
            builderQuery = "";
            builderQuery += reviewsQuery;
            nothingBefore = false;
        }
        else if (reviewsQuery!=null && !nothingBefore)
        {
            System.out.println(reviewsQuery);
            builderQuery += " intersect ";
            builderQuery += reviewsQuery;
           
        }
        System.out.println("nothingBefore: "+nothingBefore);
        
        if(startYearQuery!=null && nothingBefore)
        {
            System.out.println(startYearQuery);
            builderQuery = "";
            builderQuery += startYearQuery;
             nothingBefore = false;
        }
        else if (startYearQuery!=null && !nothingBefore)
        {
            System.out.println(startYearQuery);
            builderQuery += " intersect ";
            builderQuery += startYearQuery;
           
        }
        if(endYearQuery!=null && nothingBefore){
            System.out.println(endYearQuery);
            builderQuery = "";
            builderQuery += endYearQuery;
             nothingBefore = false;
        }
        else if (endYearQuery!=null && !nothingBefore)
        {
            
            System.out.println(endYearQuery);
            builderQuery += " intersect ";
            builderQuery += endYearQuery;  
        }
    
        System.out.println("nothingBefore: "+nothingBefore);
         String executeableQuery = null; 
        
        if (builderQuery == null && lastQuery == null){
           executeableQuery = "Select * from movies";
            
        }
        else{
            if(lastQuery == null){
           executeableQuery = "Select *\n"
        +"from movies\n"
        +"where movies.id in (" + builderQuery + ")\n";
            }
            else{ // last query not null
                if(builderQuery !=null){
         executeableQuery = "Select *\n"
        +"from movies\n"
        +"where movies.id in ("+lastQuery +" "+ builderQuery + ")\n";
            }
                else{
                    executeableQuery = "Select *\n"
        +"from movies\n"
        +"where movies.id in ("+lastQuery +")\n";        
                }
            }
            
            
            
        }
        System.out.println("past constructor");
        
        setQueryText(executeableQuery);
        rs = s.executeQuery(executeableQuery);
        
        //int count = rs.getMetaData().get;
        
        resultListModel.clear();
        int counter = 0;
        while(rs.next())
        {
            if(!resultListModel.contains(rs.getString("id")))
            {
                resultListModel.addElement(rs.getString("title") + " id:" + rs.getString("id"));
                counter ++;
                
            }
        }
        resultList.setModel(resultListModel);
        numberOfResultsTextField.setText("results: "+counter);
        System.out.println("what is being queried: \n"+executeableQuery);
        
        rs.close();
        s.close();
        
        
    }
    
    private void setQueryText(String str){
    queryTextArea.setText(str);
    }
    
    private void loadLastFilmingLocationCountryData() throws Exception{
        List<String> selectedLocation = filmLocationCountryList.getSelectedValuesList();
        String innerQuery = "";
        for(int i = 0 ; i <  selectedLocation.size() ; i++){
            if(i > 0){ 
                if(orToggle)
                    innerQuery+=" Union \n";
                else
                    innerQuery+= " Intersect \n";
           
            }
            innerQuery +=  "Select distinct M0.id\n"
                    + "from movies M0, locations L0\n"
                    + "where L0.location1 = '"+selectedLocation.get(i)+"'\n"
                    + "AND L0.movieid = M0.id\n"
                    + "AND M0.id IN("+filmingLocationCountryQuery+")\n";
        }
        
        lastQuery = innerQuery;
        setQueryText(lastQuery);
        
        
        
    }
    
    private void loadFilmingLocationCountryData() throws Exception{
        Statement s = c.createStatement();
        List<String> selectedCountry = countryList1.getSelectedValuesList();
        String q = "";
        String innerQuery = "";
        //System.out.println(countryQuery);
        for(int i = 0 ; i < selectedCountry.size() ; i++){
            if(i > 0){ 
                if(orToggle)
                    innerQuery+=" Union \n";
                else
                    innerQuery+= " Intersect \n";
           
            }
            innerQuery += "Select M.id\n"
                    + "from movies M, countries C\n"
                    + "where C.country = '"+selectedCountry.get(i)+"'\n"
                    + "AND C.movieid = M.id\n"
                    + "AND M.id IN("+countryQuery+")\n";
            
        }
        
        String outerQuery = "select distinct locations.location1\n"
                + "from locations\n"
                + "where locations.movieid IN \n("+innerQuery+")";
        System.out.println(outerQuery);
        //countryQuery = genreQuery + " Intersect " + q;
        //System.out.println(countryQuery);
        ResultSet rs = s.executeQuery(outerQuery);
        filmingLocationCountryQuery = innerQuery;
        int counter = 0;
        filmingLocationCountryListModel.clear();
        while(rs.next())
        {
            if(!filmingLocationCountryListModel.contains(rs.getString("location1")))
            {
                filmingLocationCountryListModel.addElement(rs.getString("location1"));
                //System.out.println(rs.getString("location1"));
                counter++;
            }
        }
        s.close();
        rs.close();
        System.out.println();
        System.out.println("Number of filming location countries: " +counter );
        filmLocationCountryList.setModel(filmingLocationCountryListModel);  
        setQueryText(filmingLocationCountryQuery);
    }
    
    
    private void loadCountryData() throws Exception{
        Statement s = c.createStatement();
        List<String> selectedGenres = genreList1.getSelectedValuesList();
        String q = "";
        String innerQuery = "";
        
        for(int i = 0 ; i < selectedGenres.size() ; i++){
            if(i > 0) 
                if(orToggle)
                    innerQuery+=" Union \n";
                else
                    innerQuery+= " Intersect \n";
            innerQuery += "Select m2.id \n"
                    + "From Movies M2, genres G2\n" 
                    + "where G2.genre='"+selectedGenres.get(i)+"' AND M2.id =G2.movieID";
        }
        
        String outerQuery = "Select distinct country\n"
                + "From Countries\n"
                + "Where Countries.movieID IN \n("+innerQuery+")";
        System.out.println(outerQuery);
        //genreQuery = q;
        countryQuery = innerQuery;
                
            
        ResultSet rs = s.executeQuery(outerQuery);
        int counter = 0;
        countryListModel.clear();
        while(rs.next())
        {
            if(!countryListModel.contains(rs.getString("country")))
            {
                countryListModel.addElement(rs.getString("country"));
                System.out.println(rs.getString("country"));
                counter++;
            }
        }
        s.close();
        rs.close();
        System.out.println();
        System.out.println("Number of countries: " +counter );
        countryList1.setModel(countryListModel);    
        setQueryText(countryQuery);
    }
    private void loadGenreData() throws Exception{
        Statement s = c.createStatement();
        ResultSet rs = s.executeQuery("Select distinct genre from genres");
        while(rs.next())
        {
            if(!genreListModel.contains(rs.getString("genre")))
            {
                genreListModel.addElement(rs.getString("genre"));
            }
        }
        s.close();
        rs.close();
        
        genreList1.setModel(genreListModel);
    }
    
    private void establishDBConnection(){
         try{
            c= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "system" , "123");
            System.out.println("It connected");
            return;
        }
        catch (SQLException e) {
            System.out.println("It did not connect with error" + e.getMessage());
            return;
        }
    }
    
    private void genreList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_genreList1ValueChanged
        
    }//GEN-LAST:event_genreList1ValueChanged

    private void countryList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_countryList1ValueChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_countryList1ValueChanged

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Generating Master Query Results");
        try {loadMasterQuery();}catch(Exception e){System.err.println("Error Loading Master Data");}
        
        
        
        
    }//GEN-LAST:event_executeButtonActionPerformed

    private void genreList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genreList1MouseClicked
        // TODO add your handling code here:
        System.out.println(genreList1.getSelectedValuesList());
        try {loadCountryData();} catch (Exception e){System.err.println("Error Loading Country Data");};
    }//GEN-LAST:event_genreList1MouseClicked

    private void countryList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countryList1MouseClicked
        // TODO add your handling code here:
        System.out.println(countryList1.getSelectedValuesList());
        try {loadFilmingLocationCountryData();} catch (Exception e){System.err.println("Error Loading Country Data");};
    }//GEN-LAST:event_countryList1MouseClicked

    private void filmLocationCountryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filmLocationCountryListMouseClicked
        // TODO add your handling code here:
        System.out.println(filmLocationCountryList.getSelectedValuesList());
        try {loadLastFilmingLocationCountryData();} catch (Exception e){System.err.println("Error Loading Last Filming Location Country Data");};
    }//GEN-LAST:event_filmLocationCountryListMouseClicked

    private void andOrComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andOrComboBoxActionPerformed
        // TODO add your handling code here:
        int index = andOrComboBox.getSelectedIndex();
        
        if(index == 0 || index == 1)
            orToggle = false;
        else
            orToggle = true;
        System.out.println(orToggle);
    }//GEN-LAST:event_andOrComboBoxActionPerformed

    private void getTagsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTagsButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Generating Master Query Results");
        try {loadTagQuery();}catch(Exception e){System.err.println("Error Loading Master Data" +e.getLocalizedMessage());}
        //if rating selected
        //if (andOrComboBox.getSelectedIndex() > 0)
        //if number of reviews selected
        //if start year
        //if end year
        //if tagweight
        
        
        
    }//GEN-LAST:event_getTagsButton1ActionPerformed

    private void ratingValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingValueTextFieldActionPerformed
        // TODO add your handling code here:
        System.out.println(ratingComboBox.getSelectedIndex());
        int opCode = ratingComboBox.getSelectedIndex();
        System.out.println(ratingValueTextField.getText());
        String op = "";
        String value;
        String ratingQuery = "";
        
        if(opCode == 0){
            System.out.println("No Operator Selected");
            return;
        }
        else if(opCode == 1){
            op = "=";
        }
        else if(opCode == 2){
            op = "<";
        }
        else if(opCode == 3){
            op = ">";
        }
        else if(opCode == 4){
            op = "<=";
        }
        else if(opCode == 5){
            op = ">=";
        }
        
        value = ratingValueTextField.getText();
        
        ratingQuery = "Select mRating.id\n"
                + "from movies mRating\n"
                +
"where((mRating.rtAllCriticsRating + mRating.rtTopCriticsRating + mRating.rtAudienceRating) / 3.0) "
                + " "+op+ "  "+value;
        
        System.out.println(ratingQuery);
        this.ratingQuery=ratingQuery;
        
        
        
             
    }//GEN-LAST:event_ratingValueTextFieldActionPerformed

    private void reviewsValueTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewsValueTextField1ActionPerformed
        // TODO add your handling code here:
        System.out.println(numberOfReviewsComboBox.getSelectedIndex());
        int opCode = numberOfReviewsComboBox.getSelectedIndex();
        System.out.println(reviewsValueTextField1.getText());
        String op = "";
        String value;
        String reviewsQuery = "";
        
        if(opCode == 0){
            System.out.println("No Operator Selected");
            return;
        }
        else if(opCode == 1){
            op = "=";
        }
        else if(opCode == 2){
            op = "<";
        }
        else if(opCode == 3){
            op = ">";
        }
        else if(opCode == 4){
            op = "<=";
        }
        else if(opCode == 5){
            op = ">=";
        }
        
        value = reviewsValueTextField1.getText();
        
        reviewsQuery = "Select mReviews.id\n"
                + "from movies mReviews\n"
                +
"where((mReviews.rtAllCriticsNumReviews + mReviews.rtTopCriticsNumReviews + mReviews.rtAudienceNumRatings) / 3.0) "
                + " "+op+ "  "+value;
        
        System.out.println(reviewsQuery);
        this.reviewsQuery=reviewsQuery;
    }//GEN-LAST:event_reviewsValueTextField1ActionPerformed

    private void tagWeightValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagWeightValueTextFieldActionPerformed
        // TODO add your handling code here:
        System.out.println(tagWeightComboBox.getSelectedIndex());
        int opCode = tagWeightComboBox.getSelectedIndex();
        System.out.println(tagWeightValueTextField.getText());
        String op = "";
        String value;
        String tagWeightQuery = "";
        
        if(opCode == 0){
            System.out.println("No Operator Selected");
            return;
        }
        else if(opCode == 1){
            op = "=";
        }
        else if(opCode == 2){
            op = "<";
        }
        else if(opCode == 3){
            op = ">";
        }
        else if(opCode == 4){
            op = "<=";
        }
        else if(opCode == 5){
            op = ">=";
        }
        
        value = tagWeightValueTextField.getText();
        
        tagWeightQuery = "select mtWeight.tagID from movieTags mtWeight where mtWeight.tagweight "
                + op + " "
                + value;
        
        System.out.println(tagWeightQuery);
        
        
        
    }//GEN-LAST:event_tagWeightValueTextFieldActionPerformed

    private void startYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearTextFieldActionPerformed
        // TODO add your handling code here:
        System.out.println(startYearTextField.getText());
       
        String value;
        String startYearQuery = "";
        
        
        value = startYearTextField.getText();
        
        startYearQuery = "select movies.id\n" +
                           "from movies\n" +
                        "where movies.year >= "
                + value;
        
        
        System.out.println(startYearQuery);
        this.startYearQuery=startYearQuery;
        
        
    }//GEN-LAST:event_startYearTextFieldActionPerformed

    private void endYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endYearTextFieldActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        System.out.println(endYearTextField.getText());
       
        String value;
        String endYearQuery = "";
        
        
        value = endYearTextField.getText();
        
        endYearQuery = "select movies.id\n" +
                           "from movies\n" +
                        "where movies.year <= "
                + value;
        
        
        System.out.println(endYearQuery);
        this.endYearQuery=endYearQuery;
    }//GEN-LAST:event_endYearTextFieldActionPerformed

    private void resultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseClicked
        // TODO add your handling code here:
        String line = resultList.getSelectedValue();
        String[] parse = line.split(" id:");
        String title = parse[0];
        String id = parse[1];
        String text = "";
        System.out.println("query: ");
        
        try {
            Statement s = c.createStatement();
            String query = "Select * \n"
                    + "from movies\n"
                    + "where id = "+id;
            System.out.println(query);
            ResultSet rs = s.executeQuery(query);
            while(rs.next()){
                text+="id: ";
                text+=rs.getString("id");
                text+="\ntitle: ";
                text+=rs.getString("title");
                text+="\nyear: ";
                text+=rs.getString("year");
                text+="\nrtAllCriticsRating: ";
                text+=rs.getString("rtAllCriticsRating");
                text+="\nrtAllCriticsNumReviews: ";
                text+=rs.getString("rtAllCriticsNumReviews");
                text+="\nrtTopCriticsRating: ";
                text+=rs.getString("rtTopCriticsRating");
                text+="\nrtTopCriticsNumReviews: ";
                text+=rs.getString("rtTopCriticsNumReviews");
                text+="\nrtAudienceRating: ";
                text+=rs.getString("rtAudienceRating");
                text+="\nrtAudienceNumRatings: ";
                text+=rs.getString("rtAudienceNumRatings");
                
            }
            rs.close();
            s.close();
          
            infoTextArea.setText(text);
        
        
        
        }catch (Exception e){
            System.out.println("Error Selecting");
        }
        
        
        
    }//GEN-LAST:event_resultListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> andOrComboBox;
    private javax.swing.JList<String> countryList1;
    private javax.swing.JTextField endYearTextField;
    private javax.swing.JButton executeButton;
    private javax.swing.JList<String> filmLocationCountryList;
    private javax.swing.JList<String> genreList1;
    private javax.swing.JButton getTagsButton1;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList<String> movieTagValuesList;
    private javax.swing.JLabel numberOfResultsTextField;
    private javax.swing.JComboBox<String> numberOfReviewsComboBox;
    private javax.swing.JTextArea queryTextArea;
    private javax.swing.JComboBox<String> ratingComboBox;
    private javax.swing.JTextField ratingValueTextField;
    private javax.swing.JList<String> resultList;
    private javax.swing.JTextField reviewsValueTextField1;
    private javax.swing.JTextField startYearTextField;
    private javax.swing.JComboBox<String> tagWeightComboBox;
    private javax.swing.JTextField tagWeightValueTextField;
    // End of variables declaration//GEN-END:variables
}
